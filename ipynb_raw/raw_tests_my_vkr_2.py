# -*- coding: utf-8 -*-
"""raw-tests_my_VKR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14EgdMKvFekxOLRb-jeTR7yOeUtsk7YDj

# READY

### 1. Основной блок импорта (для всех этапов).
"""

# Commented out IPython magic to ensure Python compatibility.
# ---- pip install
! pip install xgboost
! pip install scikeras[tensorflow]

# ---- база
import numpy as np                                      # для работы с многомерными массивами 
import pandas as pd                                     # для обработки данных
import matplotlib.pyplot as plt                         # для построения графиков
import seaborn as sns                                   # для статистической визуализации
                
# ---- работа с датафреймами
from pandas import DataFrame

# ---- sklearn
from sklearn.preprocessing import LabelEncoder          # для кодирования переменных
from sklearn.preprocessing import MinMaxScaler, RobustScaler, StandardScaler, PowerTransformer, Normalizer    # для нормализации и стандартизации
from sklearn.model_selection import train_test_split    # для разделения датасета на тренировочную и тестовую выборки
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, mean_absolute_percentage_error # метрики для алгорритмов машиннного обучения
# -- algorithms & models
from sklearn.neighbors import KNeighborsRegressor       # Метод К-ближайших соседей
from sklearn.svm import SVR                             # Метод опорных векторов
from sklearn.linear_model import LinearRegression       # Линейная регрессия
from sklearn.tree import DecisionTreeRegressor          # Дерево решений
from sklearn.ensemble import AdaBoostRegressor          # AdaBoost
from sklearn.ensemble import GradientBoostingRegressor  # Градиентный бустинг
from sklearn.ensemble import RandomForestRegressor      # Случайный лес
from sklearn.linear_model import SGDRegressor           # Стохастический градиентный спуск
from sklearn.linear_model import Lasso                  # Метод регрессии «Lasso»
from sklearn.pipeline import make_pipeline              # для создания пайплайна
from sklearn.model_selection import GridSearchCV        # для подбора параметров модели машинного обучения
from xgboost import XGBRegressor                        # XGBoost

# ---- scipy
from scipy import stats                                 # Статистические функции
from scipy.stats import shapiro                         # Тест Шапиро-Уилка на нормальность           

# ---- keras
import tensorflow.keras as keras                        
from keras.models import Sequential
from keras.layers import Dense, Flatten, Input, Dropout
from tensorflow.keras import utils
from tensorflow.keras.optimizers import Adam, SGD, RMSprop, Adagrad
# -- my -- no import for KerasRegressor -- Error
# from scikeras.wrappers import KerasRegressor
# - solution 1 -- yes
#from tensorflow import keras
#try:
#    import scikeras
#except ImportError:
    #!python -m pip install scikeras
#from scikeras.wrappers import KerasClassifier, KerasRegressor
# --
from scikeras.wrappers import KerasClassifier, KerasRegressor
# ---- model operations
from joblib import dump, load                           # для сохранения и загрузки моделей 
from tensorflow.keras.models import load_model          # для загрузки моделей 

import warnings                                         # контроль предупреждения
warnings.filterwarnings("default", category=FutureWarning)
warnings.simplefilter(action='ignore', category=FutureWarning)

# ---- flask
import flask
from flask import Flask, request, render_template

# для корректного отображения графиков в окне браузера
# %matplotlib inline  

# ---- pretify output
from google.colab import widgets
from google.colab import data_table

"""### 2. Загрузка датасета.
- github; 
"""

# tmp
!rm -rf /content/dataset

# ---- ---- Загрузка исходного датасета из github; --- ----
# ---- NOTE: prequistles -> to move in 'import'
from google.colab import widgets

# -- Разово.  Удалить лишнее из GoogleColab, создать папаку, проверить;
! pwd && ls -la && rm -r /content/sample_data 
! mkdir /content/dataset
print(f'\n---- Мусор ("sample_data") удален, целевая папка создана:\n')
# контроль
!ls -la | grep "dataset"
# Загрузка датасета из гитхаба в папку 'dataset'
print(f'\n---- Грузим исходный датасет.\n')
!wget -qc https://github.com/wwwmyroot/DS_graduate/blob/main/dataset/in_x_bp.xlsx -P "/content/dataset"
!wget -qc https://github.com/wwwmyroot/DS_graduate/blob/main/dataset/in_x_nup.xlsx -P "/content/dataset"
! ls -la /content/dataset/
print(f'\n---- Готово.\n')
# -- p_fin --
t = widgets.TabBar(["-| план |-", "-| результат |-"])
with t.output_to(0):
  print("1) Удалить папку 'sample_data'.")
  print("2) Cоздать папку 'dataset'.")
  print("3) Загрузить характеристики базальтопластика.")
  print("4) Загрузить характеристики нашивки из углепластика.")
  print("5) Всё проверить.")

with t.output_to(1):
  print("1) Удалена папка 'sample_data'.")
  print("2) Cоздана целевая папка 'dataset'.")
  print("3) Загружены характеристики базальтопластика. -> Файл 'X_bp.xlsx'.")
  print("4) Загружены характеристики нашивки из углепластика.-> Файл 'X_nup.xlsx'. ")
  print("5) Всё проверено. OK.")

"""### Первый просмотр
- enable_dataframe_formatter()
- python profiler()
"""

# Commented out IPython magic to ensure Python compatibility.
! pwd
# %cd /content/dataset/
! pwd
! ls -la

testfile = ('/content/test/Xbpt.xlsx')
with pd.ExcelWriter("/content/dataset/X_bp.xlsx") as writer:
    testfile.to_excel(writer)

#%load_ext google.colab.data_table
#%load_ext tensorboard
#
#
# Загрузим датасет из файла "X_bp.xlsx" (характеристики базальтопластика) и выведем 5 первых позиций датасета
#dataset_bp = pd.DataFrame(pd.read_excel("/content/test/Датасет для ВКР_композиты.zip", engine="openpyxl"))

dataset_bp = pd.DataFrame(pd.read_excel("/content/test/test1xbp.xlsx", engine="openpyxl"))


# dataset_bp = pd.DataFrame(pd.read_excel("/content/dataset/X_bp.xlsx", engine="xlrd"))

# df = pd.DataFrame(pd.read_excel("Test.xlsx"))

dataset_bp.head(100)

# dataset_bp.enable_dataframe_formatter()









from google.colab import data_table

# data_table.enable_dataframe_formatter()

# data.airports()

# data_table.DataTable(data.airports(), include_index=False, num_rows_per_page=10)

"""# RAW _ 01"""

# вывод таблиц Tutorial: Formatted Output in Python
# https://www.youtube.com/watch?v=fsBslGyCeYI
# https://www.youtube.com/watch?v=Mfmr_Puhtew
#

std_lst = [['RNo', 'Name', 'Age', 'Code', 'Misc'],
           ['0', 'Alex', '24', '5674-GG', '&^&^==='],
           ['1', 'Tonny', '37', '74-RRG', 'zoi v<szf'],
           ['2', 'Lisa', '22', '7775-DE', 'u7u7udk VH'],
           ['3', 'Ann', '14', '74-33-54-G', '7U7uu'],]

gap=' | '

heading=f"{gap}{'RNo':3s}{gap}{'Name':20s}{gap}{'Age':4s}{gap}{'Code':20s}{gap}{'Misc':20s}{gap}"

print("="*84)
print(heading)
print("-"*84)

for data in std_lst[1:]:
  rec = f"{gap}{data[0]:3s}{gap}{data[1]:20s}{gap}{data[2]:4s}{gap}{data[3]:20s}{gap}{data[4]:20s}{gap}"
  print(rec)
print("-"*84)

# Визуальный описательный анализ данных
# https://github.com/tudev/Workshops-2020-2021/tree/master/Google%20Colab%20Tutorials
# https://www.youtube.com/watch?v=1d8-KUIC7wQ

# https://www.youtube.com/watch?v=UFtKj5k2Sis&list=PL_lHtZQj-g8PUSRi3NAAX1YbbiEazGFBa&index=7
# prevent from disconnecting

import IPython
from google.colab import output

display(IPython.display.Javascript('''
function ClickConnect(){
  btn = document.querySelector("colab-connect-button")
  if (btn !=null) {
    console.log("Click colab-connect-button");
    btn.click()
    }  
  btn = getElementByID('ok')
  if (btn !=null) {
    console.log("Click reconnect");
    btn.click()
    }
 }

setInterval(ClickConnect,60000)
'''))

# colab connection details
from psutil import *

# how much CPU
print(f'CPU count:')
cpu_count()

# CPU model and speed
! lscpu | grep 'Model name'

# Usable HDD space
print(f'Usable HDD space:')
! df -h / | awk '{print $4}'

# Usable memory
print(f'Usable memory:')
! free -h --si | awk '/Mem:/{print $2}'

# GPU Type
print(f'GPU Type:')
! nvidia-smi -L

#GPU specs
print(f'GPU specs:')
! nvidia-smi

from google.colab import widgets

print("\n------------- Заголовок. -------------\n")

# Now we can create a grid, optional header_row and header_column
# control whether we want header elements in the grid
grid = widgets.Grid(6, 2, header_row=True, header_column=True)
with grid.output_to(0, 0):
  print("1 колонка 1 ряда")
with grid.output_to(0, 1):
  print("2 колонка 1 ряда")
with grid.output_to(1, 0):
  print("1 колонка 2 ряда")
with grid.output_to(1, 1):
  print("2 колонка 2 ряда")
with grid.output_to(2, 0):
  print("1 колонка 3 ряда")
with grid.output_to(2, 1):
  print("2 колонка 3 ряда")
with grid.output_to(3, 0):
  print("1 колонка 4 ряда")
with grid.output_to(3, 1):
  print("2 колонка 4 ряда")
with grid.output_to(4, 0):
  print("1 колонка 5 ряда")
with grid.output_to(4, 1):
  print("2 колонка 5 ряда")
with grid.output_to(5, 0):
  print("1 колонка 6 ряда")
with grid.output_to(5, 1):
  print("2 колонка 6 ряда")

print("\n------------- Выполнено. -------------\n")
# -------------

t = widgets.TabBar(["- план работ -", " - результат работ -"])
with t.output_to(0):
  print("1) Удалилить папку 'sample_data'.")
  print("2) Cоздать папку 'dataset'.")
  print("3) Загрузить характеристики базальтопластика.")
  print("4) Загрузить характеристики нашивки из углепластика.")
  print("5) Всё проверить.")

#t.clear_tab(0)  # clears current
# with t.output_to(0):
#  print("1) Удалилить папку 'sample_data'.")
#  print("2) Cоздать папку 'dataset'.")
#  print("3) Загрузить характеристики базальтопластика.")
#  print("4) Загрузить характеристики нашивки из углепластика.")
#  print("5) Всё проверить.")

with t.output_to(1):
  print("1) Удалена папка 'sample_data'.")
  print("2) Cоздана целевая папка 'dataset'.")
  print("3) Загружены характеристики базальтопластика. -> Файл 'X_bp.xlsx'.")
  print("4) Загружены характеристики нашивки из углепластика.-> Файл 'X_nup.xlsx'. ")
  print("5) Всё проверено. OK.")
#t.clear_tab(1)
# with t.output_to(1):
#  print("Me too temporary")
#  print("1/2 Me is permanent")
#  print("2/2 Me too is permanent")

import numpy as np
import random
import time
from matplotlib import pyplot as plt
grid = widgets.Grid(2, 2)
for i in range(20):
  with grid.output_to(random.randint(0, 1), random.randint(0, 1)):
    grid.clear_cell()
    fig, ax = plt.subplots(figsize=(2, 2))
    ax.plot(np.random.random((10, 1)))
    plt.show()
  time.sleep(0.5)

from google.colab import widgets
from google.colab import output
from matplotlib import pyplot as plt
from six.moves import zip


def create_tab(location):
  tb = widgets.TabBar(['a', 'b'], location=location)
  with tb.output_to('a'):
    fig, ax = plt.subplots(figsize=(3, 3))
    ax.plot([1, 2, 3])
    plt.show()
  # Note you can access tab by its name (if they are unique), or
  # by its index.
  with tb.output_to(1):
    fig, ax = plt.subplots(figsize=(3, 3))
    ax.plot([3, 2, 3])
    plt.show()


print('Different orientations for tabs')

positions = ['start', 'bottom', 'end', 'top']

for p, _ in zip(positions, widgets.Grid(1, 4)):
  print('---- %s ---' % p)
  create_tab(p)

t = widgets.TabBar(["hi", "bye"])
with t.output_to(0):
  print("I am temporary")
  t.clear_tab()  # clears current
  print("I am permanent")

with t.output_to(1):
  print("Me too temporary")

# Cler works outside of with statement
t.clear_tab(1)

with t.output_to(1):
  print("1/2 Me is permanent")
with t.output_to(1):
  print("2/2 Me too is permanent")

from google.colab import data_table
from vega_datasets import data

data_table.enable_dataframe_formatter()

data.airports()

# --

# from google.colab import data_table
data_table.DataTable(data.airports(), include_index=False, num_rows_per_page=10)

!pip install tqdm
!pip install time
from tqdm import tqdm
#import time
for i in tqdm(range(20), desc = 'tqdm() Progress Bar'):
    time.sleep(0.5)

# ? import ipywidgets
# ? from IPython.display import display, clear_output

"""# TO TEST"""

# 13. Stop Google Colab From Disconnecting
# Open browser console F12 on Firefox or Ctrl+Shift+I and write down the following JavaScript code:

# function KeepClicking(){
#      console.log("Clicking");
#    document.querySelector("colab-toolbar-button#connect").click()
# }setInterval(KeepClicking,60000)

